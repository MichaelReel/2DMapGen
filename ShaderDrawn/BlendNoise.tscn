[gd_scene load_steps=4 format=2]

[ext_resource path="res://sample/grid.png" type="Texture" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec2 iResolution;

const float K1 = 0.366025404; // (sqrt(3)-1)/2;
const float K2 = 0.211324865; // (3-sqrt(3))/6;

vec2 hash( vec2 p )
{
	p = vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)));
	return -1.0 + 2.0 * fract(sin(p) * 43758.5453123);
}

float noise( in vec2 p )
{
	vec2  i = floor(p + (p.x + p.y) * K1);
	vec2  a = p - i + (i.x + i.y) * K2;
	float m = step(a.y, a.x); 
	vec2  o = vec2(m, 1.0 - m);
	vec2  b = a - o + K2;
	vec2  c = a - 1.0 + 2.0 * K2;
	vec3  h = max(0.5 - vec3(dot(a, a), dot(b, b), dot(c, c)), 0.0);
	vec3  n = h * h * h * h * vec3(dot(a, hash(i+0.0)), dot(b, hash(i+o)), dot(c, hash(i+1.0)));
	return dot(n, vec3(70.0));
}

float fbm(vec2 uv) {
	uv *= 5.0;
	mat2 m = mat2(vec2(1.6,  1.2), vec2(-1.2,  1.6));
	
	float f = 0.0;
	f  = 0.5000 * noise(uv);
	uv = m * uv;
	f += 0.2500 * noise(uv);
	uv = m * uv;
	f += 0.1250 * noise(uv);
	uv = m * uv;
	f += 0.0625 * noise(uv);
	uv = m * uv;
	
	f = 0.5 + 0.5 * f;
	
	return f;
}

void fragment() {
	vec2 p = UV.xy / iResolution.xy;
	vec2 uv = p * vec2(iResolution.x / iResolution.y, 1.0);
	
	// Adding time to the base noises makes the image \"flow\" directionally
	float f1x = 0.0; // + TIME * 0.05;
	float f1y = 0.0;
	float f2x = 5.2; // - TIME * 0.05;
	float f2y = 1.3;
	
	// Adding time to the input of the combining noise causes an inplace \"flow\"
	float f1 = fbm(uv + vec2(f1x, f1y)); // + TIME * 0.05;
	float f2 = fbm(uv + vec2(f2x, f2y)) + TIME * 0.05;
	
	float f = fbm(uv + vec2(f1, f2));
	
	COLOR = vec4(f, f, f, 1.0);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/iResolution = Vector2( 0.5, 0.5 )

[node name="BlendNoise" type="TextureRect"]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
texture = ExtResource( 1 )
expand = true
__meta__ = {
"_edit_use_anchors_": false
}
