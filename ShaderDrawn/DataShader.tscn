[gd_scene load_steps=13 format=2]

[ext_resource path="res://icon.png" type="Texture" id=1]
[ext_resource path="res://ShaderDrawn/DataShader.gd" type="Script" id=2]

[sub_resource type="VisualShaderNodeCompare" id=1]
default_input_values = [ 0, 0.0, 1, 0.0, 2, 0.001 ]
condition = 1

[sub_resource type="VisualShaderNodeVectorDistance" id=2]

[sub_resource type="VisualShaderNodeTextureUniform" id=3]
uniform_name = "grid"

[sub_resource type="VisualShaderNodeTextureUniform" id=4]
uniform_name = "human"

[sub_resource type="VisualShaderNodeColorOp" id=5]
operator = 1

[sub_resource type="VisualShaderNodeInput" id=6]
input_name = "uv"

[sub_resource type="VisualShaderNodeSwitch" id=7]

[sub_resource type="VisualShaderNodeTextureUniform" id=8]
uniform_name = "TextureUniform"

[sub_resource type="VisualShader" id=9]
code = "shader_type canvas_item;
uniform sampler2D TextureUniform;
uniform sampler2D human;



void vertex() {
// TextureUniform:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 n_tex_read = texture(TextureUniform, UV.xy);
		n_out3p0 = n_tex_read.rgb;
		n_out3p1 = n_tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out3p0;
	COLOR.a = n_out3p1;

}

void fragment() {
// TextureUniform:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 n_tex_read = texture(human, UV.xy);
		n_out3p0 = n_tex_read.rgb;
		n_out3p1 = n_tex_read.a;
	}

// Input:7
	vec3 n_out7p0 = vec3(UV, 0.0);

// Distance:13
	float n_out13p0 = distance(n_out3p0, n_out7p0);

// Compare:10
	float n_in10p0 = 0.00000;
	float n_in10p2 = 0.00100;
	bool n_out10p0 = (abs(n_in10p0 - n_out13p0) < n_in10p2);
// VectorSwitch:9
	vec3 n_in9p1 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out9p0;
	if(n_out10p0)
	{
		n_out9p0 = n_in9p1;
	}
	else
	{
		n_out9p0 = vec3(n_out13p0);
	}

// Output:0
	COLOR.rgb = n_out9p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1114.44, 89.928 )
mode = 1
flags/light_only = false
nodes/vertex/0/position = Vector2( 440, 220 )
nodes/vertex/3/node = SubResource( 8 )
nodes/vertex/3/position = Vector2( -260, 220 )
nodes/vertex/connections = PoolIntArray( 3, 1, 0, 3, 3, 0, 0, 2 )
nodes/fragment/0/position = Vector2( 1220, 300 )
nodes/fragment/2/node = SubResource( 3 )
nodes/fragment/2/position = Vector2( -400, 180 )
nodes/fragment/3/node = SubResource( 4 )
nodes/fragment/3/position = Vector2( -400, 400 )
nodes/fragment/4/node = SubResource( 5 )
nodes/fragment/4/position = Vector2( -60, 280 )
nodes/fragment/7/node = SubResource( 6 )
nodes/fragment/7/position = Vector2( -80, 540 )
nodes/fragment/9/node = SubResource( 7 )
nodes/fragment/9/position = Vector2( 1000, 300 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 580, 180 )
nodes/fragment/13/node = SubResource( 2 )
nodes/fragment/13/position = Vector2( 100, 420 )
nodes/fragment/connections = PoolIntArray( 2, 0, 4, 0, 3, 0, 4, 1, 10, 0, 9, 0, 9, 0, 0, 0, 3, 0, 13, 0, 7, 0, 13, 1, 13, 0, 10, 1, 13, 0, 9, 2 )

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )

[node name="DataShader" type="TextureRect"]
material = SubResource( 10 )
anchor_right = 1.0
anchor_bottom = 1.0
texture = ExtResource( 1 )
stretch_mode = 1
script = ExtResource( 2 )
__meta__ = {
"_edit_use_anchors_": false
}
